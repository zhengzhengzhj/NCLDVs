import subprocess
import sys
from tqdm import tqdm

class taxnomy(object):
    def __init__(self,lines):
        self.taxnomyid = lines[0]
        self.lineage = lines[1]
        self.k = lines[2]
        self.p = lines[3]
        self.c = lines[4]
        self.o = lines[5]
        self.f = lines[6]
        self.g = lines[7]
        self.s = lines[8]
        self.t = lines[9]
    def gatherAttrs(self):
        return "\t".join("{}".format(getattr(self, k))for k in self.__dict__.keys())
    def __str__(self):
        return "\t".join("{}".format(i for i in [self.k,self.p,self.c,self.o,self.f,self.g,self.s]))
    def __getattr__(self, name):
        return " "
    def __str__(self):
        return "\t".join([s for s in [self.k,self.p,self.c,self.o,self.f,self.g,self.s]])
    
    def get_variable(self,name):
        if name in self.__dict__:
            return getattr(self, name)
        else:
            sys.stderr.write("[***]The rank you specified is not avaible!\n")

def taxnomy_filename(filename):
    id2tax = {}
    for line in tqdm(open(filename),desc=f'[***]Reading {filename}'):
        lines = line.strip("\n").split("\t")
        id2tax[lines[0]] = taxnomy(lines)
    return id2tax

#NCLDVs = \
#'''
#Poxviridae
#Asfarviridae
#Iridoviridae
#Ascoviridae
#Phycodnaviridae
#Mimiviridae
#Marseillevirus
#Lausannevirus
#Pandoravirus
#'''

## version 1
'''

NCLDVs = \
f__Poxviridae
f__Asfarviridae
f__Iridoviridae
f__Ascoviridae
f__Phycodnaviridae
f__Mimiviridae
g__Pandoravirus
f__Marseilleviridae
'''

### version 2

NCLDVs = \
'''
f__Poxviridae
f__Asfarviridae
f__Iridoviridae
f__Ascoviridae
f__Phycodnaviridae
f__Mimiviridae
g__Pandoravirus
f__Marseilleviridae

o__Caudovirales

f__Adenoviridae
f__Alloherpesviridae
f__Ampullaviridae
f__Baculoviridae
f__Bicaudaviridae
f__Clavaviridae
f__Corticoviridae
f__Fuselloviridae
f__Globuloviridae
f__Guttaviridae
f__Halspiviridae
f__Herpesviridae
f__Hytrosaviridae
f__Lipothrixviridae
f__Malacoherpesviridae
f__Nimaviridae
f__Nudiviridae
f__Ovaliviridae
f__Papillomaviridae
f__Plasmaviridae
f__Pleolipoviridae
f__Polyomaviridae
f__Portogloboviridae
f__Rudiviridae
f__Sphaerolipoviridae
f__Tectiviridae
f__Thaspiviridae
f__Tristromaviridae
f__Turriviridae

'''

### Caudovirales, based on the https://www.mdpi.com/1999-4915/13/2/150/htm Supl Information,benchmark




## diamond outformat
## qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore score qlen slen staxids stitle

format = "qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore score qlen slen staxids"

class diamond_hit(object):
    def __init__(self,lines):
        #for i in range(16):
        #    if lines[i] == "":
        #        sys.stderr.write(f'[***]Warning, missing value {i}:{lines[i]} for query:{lines[0]}-hit:{lines[1]}\n')
        self.qseqid = lines[0]
        self.sseqid = lines[1]
        self.pident = lines[2]
        self.length = lines[3]
        self.mismatch = lines[4]
        self.gapopen = lines[5]
        self.qstart = lines[6]
        self.qend = lines[7]
        self.sstart = lines[8]
        self.send = lines[9]
        self.evalue = lines[10]
        self.bitscore = lines[11]
        self.score = float(lines[12])
        self.qlen = lines[13]
        self.slen = lines[14]
        self.staxid = lines[15]
    
    def __lt__(self,other): ## sorted by score
        return self.score < other.score

    def gatherAttrs(self):
        return "\t".join("{}".format(getattr(self, k))for k in self.__dict__.keys())
    def __str__(self):
        return self.gatherAttrs()
    
    ## sort the hit by score

def read_diamond_result(filename):
    query2hitdic = {}
    for line in tqdm(open(filename),desc= f"[***]Reading diamond results:{filename}"):
        lines = line.rstrip("\n").split("\t")
        query2hitdic.setdefault(lines[0],[]).append(diamond_hit(lines))
    return query2hitdic


import sys,os
import argparse

def parse_argv():
    parser = argparse.ArgumentParser(description='Encoding Sequence and ChIP feature.')
    parser.add_argument('function', help='Do what.')
    parser.add_argument('-l', '--lineage',help='hits lineage information, generated by taxonkit')
    parser.add_argument('-t', '--taxonid',help='taxonid file, each row include one taxonid')
    parser.add_argument('-d', '--diamond',help='diamond nr output')
    parser.add_argument('--qtaxid',help='your query taxon id')
    parser.add_argument('-qr','--qr',help='your query taxon rank, could be k,p,c,o,f,g,s')
    parser.add_argument('--itaxid',help='taxon id you want to include')
    parser.add_argument('-ir','--ir',help='taxon rank you want to include,could be k,p,c,o,f,g,s')
    parser.add_argument('--etaxid',help='taxon id you want to exclude')
    parser.add_argument('-er','--er',help='taxon rank you want to exlcude,could be k,p,c,o,f,g,s')
    args = parser.parse_args()
    
    exlcude_taxids = args.etaxid.split(',')
    exlcude_taxids_rank = args.er.split(',')

    if len(exlcude_taxids) != len(exlcude_taxids_rank):
        sys.stderr.write(f"[***] Number of exclude taxid is not the same as ranks: {args.er} taxids: {args.etaxid}")
        exit()
    return args

def is_include(kpcofgs,virus):
    kpcofgs_list = set(kpcofgs.split('\t'))
    virus  = set(virus.split())
    
    #print (kpcofgs_list,virus)
    overlap = kpcofgs_list&virus
    if len(overlap) >= 1:
        return True
    else:
        return False

def get_best_NCLDVs(diamond_hits,id2tax,virus):
    all_hits = {}
    for query in tqdm(diamond_hits,desc="[***]Seaching NCLDVs hits"):
        hits = sorted(diamond_hits[query])[::-1] ## get the best score hit
        for hit in hits:
            hit_line = str(hit)
            hit_taxonid = hit.staxid
            if hit_taxonid not in id2tax:
                continue
            hit_kpcofgs = str(id2tax[hit_taxonid])
            if is_include(hit_kpcofgs,NCLDVs):
                all_hits[query] = hit
                #print (hit)
                break  ## best NCLDVs hit
    return all_hits

def get_best_hit_excludes(diamond_hits,id2tax,query_lineage,query_rank,include_lineage,included_rank,exclude_lineages,excluded_ranks):
    all_hits = {}
    scinames_excluded = [exclude_lineages[i].get_variable(excluded_rank) for i,excluded_rank in enumerate(excluded_ranks.split(','))]
    for query in tqdm(diamond_hits,desc=f'[***]Seaching hits excluding {scinames_excluded}'):
        hits = sorted(diamond_hits[query])[::-1] ## get the best score hit
        for hit in hits:
            hit_taxonid = hit.staxid
            if hit_taxonid not in id2tax:
                continue
            hit_lineage = id2tax[hit_taxonid]
            hit_scinames_excluded = [hit_lineage.get_variable(excluded_rank) for excluded_rank in excluded_ranks.split(',')]
            #print (hit_sciname_excluded,query_sciname_excluded)
            overlap_excluded = set(hit_scinames_excluded) & set(scinames_excluded)
            
            if included_rank:
                hit_sciname_included = hit_lineage.get_variable(included_rank)
                sciname_included = query_lineage.get_variable(included_rank)
                if not overlap_excluded and hit_sciname_included == sciname_included : 
                    hit_kpcofgs = str(hit_lineage)
                    if not is_include(hit_kpcofgs,NCLDVs): ## exclude the best hit in NCLDVs
                        all_hits[query] = hit
                        break
                else:
                    continue
            else:
                if overlap_excluded:
                    continue
                else:
                    hit_kpcofgs = str(hit_lineage)
                    if not is_include(hit_kpcofgs,NCLDVs): ## exclude the best hit in NCLDVs
                        all_hits[query] = hit
                        break
    return all_hits

def get_best_hit_exclude(diamond_hits,id2tax,query_lineage,query_rank,include_lineage,included_rank,exclude_lineage,excluded_rank):
    all_hits = {}
    sciname_excluded = exclude_lineage.get_variable(excluded_rank)
    for query in tqdm(diamond_hits,desc=f"[***]Seaching hits excluding {sciname_excluded}"):
        hits = sorted(diamond_hits[query])[::-1] ## get the best score hit
        for hit in hits:
            hit_taxonid = hit.staxid
            if hit_taxonid not in id2tax:
                continue
            hit_lineage = id2tax[hit_taxonid]
            hit_sciname_excluded = hit_lineage.get_variable(excluded_rank)
            #print (hit_sciname_excluded,sciname_excluded)
            if included_rank:
                hit_sciname_included = hit_lineage.get_variable(included_rank)
                sciname_included  = include_lineage.get_variable(included_rank)
                #print (hit_sciname_included,sciname_included)
                if hit_sciname_excluded != sciname_excluded and hit_sciname_included == sciname_included: 
                    hit_kpcofgs = str(hit_lineage)
                    if not is_include(hit_kpcofgs,NCLDVs): ## exclude NCLDVs
                        all_hits[query] = hit
                        break
                else:
                    continue
            else:
                if hit_sciname_excluded == sciname_excluded:
                    continue
                else:
                    hit_kpcofgs = str(hit_lineage)
                    if not is_include(hit_kpcofgs,NCLDVs): ## exclude NCLDVs
                        all_hits[query] = hit
                        break
    return all_hits

def from_taxonid_lineage(taxid):
    command = f'echo {taxid} | taxonkit lineage | taxonkit reformat -f ' + \
    '"{k}\\t{p}\\t{c}\\t{o}\\t{f}\\t{g}\\t{s}\\t{t}" -P -F ' 
    
    sys.stderr.write(f'[***]Convert taxid:{taxid} to standard lienage based on taxonkit\n')
    p = subprocess.Popen(command,shell=True,stdout=subprocess.PIPE)
    out,err = p.communicate()
    outlist = out.decode('utf-8').rstrip("\n").split('\t')

    #print (outlist)
    outstring = "\t".join(outlist[2:])
    sys.stderr.write(f'[***]{outstring}\n')
    return taxnomy(outlist)

def from_taxonids_lineage(taxid):
    command = f'echo {taxid} | tr "," "\\n" |taxonkit lineage | taxonkit reformat -f ' + \
    '"{k}\\t{p}\\t{c}\\t{o}\\t{f}\\t{g}\\t{s}\\t{t}" -P -F ' 
    taxids = taxid.split(",")
    
    for taxid in taxids:
        sys.stderr.write(f'[***]Convert taxid:{taxid} to standard lienage based on taxonkit\n')
    p = subprocess.Popen(command,shell=True,stdout=subprocess.PIPE)
    out,err = p.communicate()
    outlists = [line.split("\t") for line in out.decode('utf-8').rstrip("\n").split("\n")]

    #print (outlists)
    outstring = ["\t".join(outlist[2:]) for outlist in outlists]
    sys.stderr.write(f'[***]{outstring}\n')
    return [taxnomy(outlist) for outlist in outlists]


def out_hits(hits,id2tax,filename):
    out = open(filename,'w')
    for query in hits:
        hittaxid = id2tax[hits[query].staxid]
        out.write(str(hits[query])+"\t"+str(hittaxid)+"\n")

def Analysis_diamond(args):
    #exclude_lineage = from_taxonids_lineage(args.etaxid)
    diamond_hits = read_diamond_result(args.diamond)
    id2tax = taxnomy_filename(args.taxonid)
    NCLDVs_hits = get_best_NCLDVs(diamond_hits,id2tax,NCLDVs)

    query_lineage = from_taxonid_lineage(args.qtaxid)
    include_lineage = from_taxonid_lineage(args.itaxid)
    
    ## for exclude one 
    #exclude_lineage = from_taxonid_lineage(args.etaxid)
    #filter_hits = get_best_hit_exclude(diamond_hits,id2tax,query_lineage,args.qr,include_lineage,args.ir,exclude_lineage,args.er)
    
    ## for exclude more than one
    exclude_lineage = from_taxonids_lineage(args.etaxid)
    filter_hits = get_best_hit_excludes(diamond_hits,id2tax,query_lineage,args.qr,include_lineage,args.ir,exclude_lineage,args.er)
    
    out_hits(NCLDVs_hits,id2tax,f"{args.diamond}.NCLDVs")
    out_hits(filter_hits,id2tax,f'{args.diamond}.Non-NCLDVs')

def get_kpcofgs(args):
    command = f'cat {args.taxonid} | taxonkit lineage | taxonkit reformat -f ' + \
    '"{k}\\t{p}\\t{c}\\t{o}\\t{f}\\t{g}\\t{s}\\t{t}" -P -F ' + f' > {args.taxonid}.lineage'
    sys.stderr.write(f"[***]Call system command: {command}.\n")
    status = os.system(command)
    if status == 0:
        sys.stderr.write("command run successfully!\n")

'''
python3 get_Nonevirus_virus.py get_kpcofgs -t Cat.hits.taxonid

python3 get_Nonevirus_virus.py get_diamond -d Cat.0.blast -t Cat.hits.taxonid.lineage --qtaxid 3144 -qr f --etaxid 3142 -er f


'''


if __name__ == "__main__":
    args = parse_argv()
    if args.function == "get_kpcofgs":
        get_kpcofgs(args)
    if args.function == "get_diamond":
        Analysis_diamond(args)
